<?php

namespace App\Controller;

use Cake\Event\EventInterface;
use App\Network\Email\Email;
use Cake\ORM\Entity;
use Cake\Datasource\ConnectionManager;

class AjaxController extends AppController
{

	var $name = 'ajax';
	var $uses = array();


	public function initialize(): void
	{
		parent::initialize();
		$this->loadComponent('Customfunctions');
		$this->loadComponent('Clscommon');
		$this->Session = $this->getRequest()->getSession();
		$this->DirCountry = $this->getTableLocator()->get('DirCountry');
		$this->DirRegion = $this->getTableLocator()->get('DirRegion');
		$this->DirZone = $this->getTableLocator()->get('DirZone');
		$this->DirState = $this->getTableLocator()->get('DirState');
		$this->DirDistrict = $this->getTableLocator()->get('DirDistrict');
		$this->DirMineralGrade = $this->getTableLocator()->get('DirMineralGrade');
		$this->DirMeMineral = $this->getTableLocator()->get('DirMeMineral');
		$this->McApplicantDet = $this->getTableLocator()->get('McApplicantDet');
		$this->MmsUser = $this->getTableLocator()->get('MmsUser');
		$this->McUser = $this->getTableLocator()->get('McUser');
		$this->Mine = $this->getTableLocator()->get('Mine');
	}


	public function getDupEmail(){

		$this->autoRender = false;

		$uemail = $_POST['uemail'];

		if (filter_var($uemail, FILTER_VALIDATE_EMAIL)) {

		  $email = $this->MmsUser->find('all',array('conditions'=>array('email IS'=>base64_encode($uemail))))->first();

		  if(!empty($email)){
		  	echo 1;
		  }
		
		} else {

		  echo 2;
		}


		
		exit;

	}


	public function getDupMmsMobile(){

		$this->autoRender = false;

		$umobile = $_POST['umobile'];

		if(preg_match("/^[0-9]{10}$/", $umobile)) {

		  $mobile = $this->MmsUser->find('all',array('conditions'=>array('mobile IS'=>base64_encode($umobile))))->first();

		  if(!empty($mobile)){
		  	echo 1;
		  }

		}else{

			echo 2;
		}

		
		exit;

	}


	public function getDupStateUsrRegId(){




	}

	//get Months array
	public function getMonthArr()
	{

		$this->autoRender = false;
		$year = htmlentities($_POST['year'], ENT_QUOTES);

		$months = array(
			'01' => 'January',
			'02' => 'February',
			'03' => 'March',
			'04' => 'April',
			'05' => 'May',
			'06' => 'June',
			'07' => 'July',
			'08' => 'August',
			'09' => 'September',
			'10' => 'October',
			'11' => 'November',
			'12' => 'December'
		);

		$monthArr = [];
		$currMonth = date('m');
		$currYear = date('Y');

		if (!empty($year)) {
			echo "<option value=''>Select</option>";
			foreach ($months as $key => $each) {
				echo "<option value=" . $key . ">" . $each . "</option>";
				if ($currMonth == $key && $currYear == $year) {
					break;
				}
			}
		}

		//echo json_encode($monthArr);
	}

	public function getRegionsArr()
	{

		$this->autoRender = false;

		$zone = htmlentities($_POST['zone'], ENT_QUOTES);
		$regions = $this->DirRegion->find('list', array('keyField' => 'id', 'valueField' => 'region_name', 'conditions' => array('zone_name IS' => $zone)))->toArray();

		if (!empty($regions)) {
			echo "<option value=''>Select</option>";
			foreach ($regions as $key => $each) {
				echo "<option value=" . $each . ">" . $each . "</option>";
			}
		}
	}

	public function getStatesArr()
	{

		$this->autoRender = false;

		$region_name = htmlentities($_POST['region'], ENT_QUOTES);
		$states = $this->DirDistrict->getstateByregion($region_name);

		if (!empty($states)) {
			echo "<option value=''>Select</option>";
			foreach ($states as $key => $each) {
				echo "<option value=" . $key . ">" . $each . "</option>";
			}
		}
	}

	public function getDistrictsArr()
	{

		$this->autoRender = false;

		$state = htmlentities($_POST['state'], ENT_QUOTES);
		$districts = $this->DirDistrict->getDistrictCodesByStateCode($state);

		if (!empty($districts)) {
			echo "<option value=''>Select</option>";
			foreach ($districts as $key => $each) {
				echo "<option value=" . $key . ">" . $each . "</option>";
			}
		}
	}

	public function getParentuserArr()
	{

		$this->autoRender = false;
		$roleid = htmlentities($_POST['roleid'], ENT_QUOTES);

		if ($roleid == 2) {
			$parentid = '1';
		} elseif ($roleid == 3) {
			$parentid = '2';
		} elseif ($roleid == 5) {
			$parentid = '4';
		} elseif ($roleid == 6) {
			$parentid = '5';
		} elseif ($roleid == 8) {
			$parentid = '7';
		} elseif ($roleid == 9) {
			$parentid = '8';
		}

		$supUsersList = $this->MmsUser->find('all', array(
			'fields' => array('id', 'first_name', 'last_name', 'user_name'),
			'conditions' => array('is_delete is' => 0, 'role_id' => $parentid)
		))
			->order('first_name')
			->toArray();

		echo "<option value=''>Select</option>";

		foreach ($supUsersList as $eachUser) {
			$name = $eachUser['first_name'] . ' ' . $eachUser['last_name'] . '(' . $eachUser['user_name'] . ')';
			echo "<option value=" . $eachUser['id'] . ">" . $name . "</option>";
		}
	}

	public function getZoneRegionArr()
	{

		$this->autoRender = false;
		$roleid = htmlentities($_POST['roleid'], ENT_QUOTES);
		$parentid = htmlentities($_POST['parentid'], ENT_QUOTES);

		if ($roleid == 5) {

			$resultList =	$this->DirZone->find('list', array('keyField' => 'id', 'valueField' => 'zone_name'))->order('id')->toArray();
			$field = 'zone_name';
		} elseif ($roleid == 6) {

			$usrZoneName = $this->MmsUser->find('all', array(
				'fields' => array('zone.zone_name'),
				'join' => array(array('table' => 'dir_zone', 'alias' => 'zone', 'type' => 'INNER', 'conditions' => array('zone.id = MmsUser.zone_id'))),
				'conditions' => array('MmsUser.id is' => $parentid)
			))->first();


			$resultList = $this->DirRegion->find('list', array('keyField' => 'id', 'valueField' => 'region_name', 'conditions' => array('zone_name IS' => $usrZoneName['zone']['zone_name'])))->order('id')->toArray();
			$field = 'region_name';
		}

		echo "<option value=''>Select</option>";
		//
		foreach ($resultList as $key => $each) {

			echo "<option value=" . $key . ">" . $each . "</option>";
		}
	}

	public function userAllocation()
	{

		$this->TblAllocationDetails = $this->getTableLocator()->get('TblAllocationDetails');
		$this->TblAllocationNODetails = $this->getTableLocator()->get('TblAllocationNODetails');

		$this->autoRender = false;
		$userRole = $this->Session->read('mms_user_role');
		$userid = $this->Session->read('mms_user_id');
		$error = 'yes';
		
		$seriestype = htmlentities($_POST['seriestype'], ENT_QUOTES);
		$supid = htmlentities($_POST['supid'], ENT_QUOTES);
		$prid = htmlentities($_POST['prid'], ENT_QUOTES);
		$allocationtype = htmlentities($_POST['allocationtype'], ENT_QUOTES);
		$applicantUserid = $_POST['appuserid'];
		

		if ($userRole == 1 && $supid != '' && $prid != '') {

			if($seriestype == 'fseries')
			{
				
				$result = $this->TblAllocationDetails->allocation($supid, $prid, $applicantUserid, $allocationtype);

			}

			if($seriestype == 'lseries')
			{

				$result = $this->TblAllocationNODetails->allocation($supid, $prid, $applicantUserid, $allocationtype);
			}
			
			$error = 'no';
		}
		

		if ($userRole == 7 && $supid != '' && $prid != '') {

			$result = $this->TblAllocationNODetails->allocation($supid, $prid, $applicantUserid,$allocationtype);
			
			$error = 'no';
		}

		echo $error;

		
	}

	//FORM L > PART II: Trading Activity
	public function getTradAcGradeDetail()
	{

		$this->autoRender = false;

		if ($this->request->is('post')) {

			$mineral = htmlentities($_POST['mineral'], ENT_QUOTES);
			$return_date = htmlentities($_POST['returnDate'], ENT_QUOTES);
			$data = $this->DirMineralGrade->getAllMineralGradeinfo($mineral, $return_date);

			echo '<option value="">-Select grade-</option>';
			foreach ($data['gradeData'] as $key => $each) {
				echo '<option value="' . $key . '">' . $each . '</option>';
			}
		}
	}

	public function getRawMaterialsMetalsUnit()
	{

		$this->autoRender = false;

		if ($this->request->is('post')) {

			$mineral = htmlentities($_POST['mineral'], ENT_QUOTES);
			$data = $this->DirMeMineral->getMineralUnit($mineral);

			echo $data;
		}
	}

	public function getCountryNameLSeries()
	{

		$this->autoRender = false;

		if ($this->request->is('post')) {

			$result = $this->DirCountry->getCountryListByInput($this->request->getData());
			echo $result;
		}
	}

	public function getRegistrationNo()
	{

		$this->autoRender = false;

		if ($this->request->is('post')) {

			$result = $this->McApplicantDet->getRegNo($this->request->getData());
			echo $result;
		}
	}


	public function genLevel3UserPass()
	{

		$this->autoRender = false;

		if ($this->request->is('post')) {

			$minecode  =  NUll;
			$username = $this->Session->read('username');
			$level2usrid = htmlentities($_POST['level2usrid'], ENT_QUOTES);
			$userid = htmlentities($_POST['userid'], ENT_QUOTES);
			$useremail = htmlentities($_POST['useremail'], ENT_QUOTES);

			$level2type = htmlentities($_POST['level2type'], ENT_QUOTES);
			if ($level2type == 'Mining') {
				$level2type = 1;
				$explode = explode('/', $userid);
				$minecode = $explode[1];
			}

			$newEntity = $this->McUser->newEntity(array(

				'mcu_user_id' => $level2usrid,
				'mcu_email' => $useremail,
				'mcu_mine_code' => $minecode,
				'mcu_activity' => $level2type,
				'mcu_ip_address' => $_SERVER['REMOTE_ADDR'],
				'mcu_level_flag' => 2,
				'mcu_parent_app_id' => $username,
				'mcu_child_user_name' => $userid
			));

			$result = $this->McUser->save($newEntity);
			$record_id = $result->mcu_user_id;
			$this->Clscommon->forgotPassword($record_id, $userid, $useremail, 'McUser');

			echo 1;
		}
	}

	public function getRawMaterialMetalsUnit()
	{

		$this->autoRender = false;

		if ($this->request->is('post')) {

			$mineralName = htmlentities($_POST['value'], ENT_QUOTES);
			$data = $this->DirMeMineral->getMineralUnit($mineralName);

			echo $data;
		}
	}

	/***
	 * Created by Shweta Apale 09-12-2021
	 * To get IBM by State & District Selection
	 */

	public function getIbmByStateDistrictArray()
	{
		$this->autoRender = false;

		$state = $_POST['state'];
		$district = $_POST['district'];
		$ibm = $this->Mine->getIbmByStateDistrict($state, $district);
		if (!empty($ibm)) {
			echo "<option value=''>Select</option>";
			foreach ($ibm as $key => $each) {
				echo "<option value='" . $key . "'>" . $each . "</option>";
			}
		} else {
			echo "<option> No IBM Registration Number Avaiable</option>";
		}
	}

	/***
	 * Created by Shweta Apale 09-12-2021
	 * To get Mine Name by IBM Selection
	 */
	public function getMineNameByIbmArray()
	{

		$this->autoRender = false;

		$ibm = $_POST['ibm'];
		$minenames = $this->Mine->getMineNameByIbm($ibm);
		if (!empty($minenames)) {
			echo "<option value=''>Select</option>";
			foreach ($minenames as $key => $each) {
				echo "<option value='" . $key . "'>" . $each . "</option>";
			}
		} else {
			echo "<option> No Mine Name Avaiable</option>";
		}
	}

	/***
	 * Created by Shweta Apale 09-12-2021
	 * To get Lessee Owner Name by IBM Selection
	 */

	public function getLesseeOwnerByIbmArray()
	{
		$this->autoRender = false;

		$ibm = $_POST['ibm'];
		$owner = $this->Mine->getLesseeOwnerByIbm($ibm);
		if (!empty($owner)) {
			echo "<option value=''>Select</option>";
			foreach ($owner as $key => $each) {
				echo "<option value='" . $key . "'>" . $each . "</option>";
			}
		} else {
			echo "<option> No Lessee Owner Avaiable</option>";
		}
	}

	/***
	 * Created by Shweta Apale 09-12-2021
	 * To get Lessee Area by Mine Code Selection
	 * Commented because Lesse area is not present in any table
	 */

	public function getLesseeAreaByIbmArray()
	{
		$this->autoRender = false;

		$ibm = $_POST['ibm'];
		$area = $this->Mine->getLesseeAreaByIbm($ibm);
		if (!empty($area)) {
			echo "<option value=''>Select</option>";
			foreach ($area as $key => $each) {
				echo "<option value='" . $key . "'>" . $each . "</option>";
			}
		} else {
			echo "<option> No Lesse Area Avaiable</option>";
		}
	}

	/***
	 * Created by Shweta Apale 09-12-2021
	 * To get Mine Code by IBM Selection
	 */

	public function getMineCodeByIbmArray()
	{
		$this->autoRender = false;

		$ibm = $_POST['ibm'];
		$minecodes = $this->Mine->getMineCodeByIbm($ibm);
		if (!empty($minecodes)) {
			foreach ($minecodes as $key => $each) {
				echo "<option value='" . $key . "'>" . $each . "</option>";
			}
		} else {
			echo "<option> No Mine Code Avaiable</option>";
		}
	}
	
	//Made by Shweta Apale 
	public function getDistrictsRegionArray()
	{

		$this->autoRender = false;
		$region_name = $_POST['region_name'];
		$districts = $this->DirDistrict->getDistrictByregionArray($region_name);

		if (!empty($districts)) {
			echo "<option value=''>Select</option>";
			foreach ($districts as $key => $each) {
				echo "<option value=" . $key . ">" . $each . "</option>";
			}
		}
	}


	//Made by Shweta Apale 
	public function getStatesByDistrictArray()
	{

		$this->autoRender = false;
		$district_code = $_POST['district_code'];
		$states = $this->DirState->getStateCodesByDistrictCode($district_code);

		if (!empty($states)) {
			echo "<option value=''>Select</option>";
			foreach ($states as $key => $each) {
				echo "<option value=" . $key . ">" . $each . "</option>";
			}
		}
	}

	//Made by Shweta Apale 
	public function getDistrictsArray()
	{

		$this->autoRender = false;

		$state = $_POST['state'];
		$districts = $this->DirDistrict->getDistrictCodesByStateCode($state);

		if (!empty($districts)) {
			echo "<option value=''>Select</option>";
			foreach ($districts as $key => $each) {
				echo "<option value=" . $key . ">" . $each . "</option>";
			}
		}
	}

	//Made by Shweta Apale 
	public function getZoneRegionsArray()
	{

		$this->autoRender = false;

		$zone = $_POST['zone'];
		$regions = $this->DirRegion->getRegionByZone($zone);

		if (!empty($regions)) {
			echo "<option value=''>Select</option>";
			foreach ($regions as $key => $each) {
				echo "<option value=" . $key . ">" . $each . "</option>";
			}
		}
	}

	//Made by Shweta Apale
	public function getSingleDistrictsArray()
	{

		$this->autoRender = false;

		$state = $_POST['state'];
		$districts = $this->DirDistrict->getDistrictCodesByStateCodeMultiple($state);
		if (!empty($districts)) {
			echo "<option value=''>Select</option>";
			foreach ($districts as $key => $each) {
				echo "<option value='" . $key . "'>" . $each . "</option>";
			}
		}
	}

	//Made by Shweta
	public function getIbmByStateDistrictArray()
	{
		$this->autoRender = false;

		$state = $_POST['state'];
		$district = $_POST['district'];
		$ibm = $this->DirDistrict->getIbmStateDistrict($state, $district);
		if (!empty($ibm)) {
			echo "<option value=''>Select</option>";
			foreach ($ibm as $key => $each) {
				echo "<option value='" . $key . "'>" . $each . "</option>";
			}
		}
	}

	//Made by Shweta
	public function getCompanyByStateDistrictIbmArray()
	{
		$this->autoRender = false;

		$state = $_POST['state'];
		$district = $_POST['district'];
		$ibm = $_POST['ibm'];
		$company = $this->DirDistrict->getCompanyStateDistrictIbm($state, $district, $ibm);
		if (!empty($company)) {
			echo "<option value=''>Select</option>";
			foreach ($company as $key => $each) {
				echo "<option value='" . $key . "'>" . $each . "</option>";
			}
		}
	}

	//Made by Shweta
	public function getPlantByStateDistrictIbmCompanyArray()
	{
		$this->autoRender = false;

		$state = $_POST['state'];
		$district = $_POST['district'];
		$ibm = $_POST['ibm'];
		$company = $_POST['company'];
		$plant = $this->DirDistrict->getPlantStateDistrictIbmCompany($state, $district, $ibm, $company);
		if (!empty($plant)) {
			echo "<option value=''>Select</option>";
			foreach ($plant as $key => $each) {
				echo "<option value='" . $key . "'>" . $each . "</option>";
			}
		}
	}

	//Made by Shweta Apale
	public function getIbmRegRegionArray()
	{
		$this->autoRender = false;

		$region_name = $_POST['region_name'];
		$regions = $this->DirDistrict->getIBMRegNoByRegion($region_name);
		if (!empty($regions)) {
			echo "<option value = ''>Select </option>";
			foreach ($regions as $key => $each) {
				echo "<option value = '" . $key . "'>" . $each . "</option>";
			}
		}
	}

	//Made by Shweta Apale
	public function getIbmRegIndustryArray()
	{
		$this->autoRender = false;

		$region_name = $_POST['region_name'];
		$industry = $_POST['industry'];
		$industries = $this->DirDistrict->getIBMRegNoByIndustry($region_name, $industry);
		if (!empty($industries)) {
			echo "<option value = ''>Select </option>";
			foreach ($industries as $key => $each) {
				echo "<option value = '" . $key . "'>" . $each . "</option>";
			}
		}
	}

	//Made by Shweta Apale
	public function getIbmRegStateArray()
	{
		$this->autoRender = false;

		$state_name = $_POST['state_name'];
		$states = $this->DirDistrict->getIBMRegNoByState($state_name);
		if (!empty($states)) {
			echo "<option value = ''>Select </option>";
			foreach ($states as $key => $each) {
				echo "<option value = '" . $key . "'>" . $each . "</option>";
			}
		}
	}

	//Made by Shweta Apale
	public function getIbmRegIndustryStateArray()
	{
		$this->autoRender = false;

		$state_name = $_POST['state_name'];
		$industry = $_POST['industry'];
		$industries = $this->DirDistrict->getIBMRegNoByIndustryByState($state_name, $industry);
		if (!empty($industries)) {
			echo "<option value = ''>Select </option>";
			foreach ($industries as $key => $each) {
				echo "<option value = '" . $key . "'>" . $each . "</option>";
			}
		}
	}

	//Made by Shweta Apale
	public function getPlantByStateArray()
	{
		$this->autoRender = false;

		$state = $_POST['state'];
		$plants = $this->OMineralIndustryInfo->getPlantState($state);
		if (!empty($plants)) {
			echo "<option value = ''>Select </option>";
			foreach ($plants as $key => $each) {
				echo "<option value = '" . $key . "'>" . $each . "</option>";
			}
		}
	}

	//Made by Shweta Apale
	public function getPlantByStateIndustryArray()
	{
		$this->autoRender = false;

		$state = $_POST['state'];
		$industry = $_POST['industryy'];
		$plants = $this->OMineralIndustryInfo->getPlantStateIndustry($state, $industry);
		if (!empty($plants)) {
			echo "<option value = ''>Select </option>";
			foreach ($plants as $key => $each) {
				echo "<option value = '" . $key . "'>" . $each . "</option>";
			}
		}
	}

	// //Made by Shweta Apale
	public function getSupplierByPlantArray()
	{
		$this->autoRender = false;

		$plant = $_POST['plant'];
		$supplier = $this->OSourceSupply->getSupplierPlant($plant);
		if (!empty($supplier)) {
			echo "<option value = ''>Select </option>";
			foreach ($supplier as $key => $each) {
				echo "<option value = '" . $key . "'>" . $each . "</option>";
			}
		}
	}

	//Made by Shweta Apale
	public function getIndustryByIbmArray()
	{
		$this->autoRender = false;

		$ibm = $_POST['ibm'];
		$industry = $this->OMineralIndustryInfo->getIndustryIbm($ibm);
		if (!empty($industry)) {
			echo "<option value = ''>Select </option>";
			foreach ($industry as $key => $each) {
				echo "<option value = '" . $key . "'>" . $each . "</option>";
			}
		}
	}

	//Made by Shweta Apale
	public function getPlantByIndustryIbmArray()
	{
		$this->autoRender = false;

		$industry = $_POST['indust'];
		$ibm = $_POST['ibm'];
		$plant = $this->OMineralIndustryInfo->getPlantIndustryIbm($industry, $ibm);
		if (!empty($plant)) {
			echo "<option value = ''>Select </option>";
			foreach ($plant as $key => $each) {
				echo "<option value = '" . $key . "'>" . $each . "</option>";
			}
		}
	}

	//Made by Shweta Apale
	public function getIbmByIndustryArray()
	{
		$this->autoRender = false;

		$industry = $_POST['indust'];
		$ibm = $this->OMineralIndustryInfo->getIbmIndustry($industry);
		if (!empty($ibm)) {
			echo "<option value = ''>Select </option>";
			foreach ($ibm as $key => $each) {
				echo "<option value = '" . $key . "'>" . $each . "</option>";
			}
		}
	}

	//Made by Shweta Apale
	public function getPlantByIndustryIbmsArray()
	{
		$this->autoRender = false;

		$industry = $_POST['industry'];
		$ibm = $_POST['ibm'];
		$plant = $this->OMineralIndustryInfo->getPlantIndustryIbms($industry,$ibm);
		if (!empty($plant)) {
			echo "<option value = ''>Select </option>";
			foreach ($plant as $key => $each) {
				echo "<option value = '" . $key . "'>" . $each . "</option>";
			}
		}
	}


	//Made by Shweta Apale
	public function getToMonthByFromMonthArray()
	{
		$this->autoRender = false;
		$from_year = $_POST['from_year'];
		$from_month = $_POST['from_month'];

		$ex = explode('-', $from_month);
		$date1 = $from_year . '-' . $ex[1] . '-' . $ex[0];

		$dateFeb = explode('-', $date1);
		$from_year_next = $from_year + 1;
		$date2 = $from_year_next . '-03-01';

		if ($dateFeb[1] == '02') {
			$diff = abs(strtotime($date2) - strtotime($date1));

			$years = floor($diff / (365 * 60 * 60 * 24));

			$month_count = floor(($diff - $years * 365 * 60 * 60 * 24) / (30 * 60 * 60 * 24)) + 1;
		} else {
			$diff = abs(strtotime($date2) - strtotime($date1));

			$years = floor($diff / (365 * 60 * 60 * 24));

			$month_count = floor(($diff - $years * 365 * 60 * 60 * 24) / (30 * 60 * 60 * 24));
		}

		if (!empty($from_month)) {
			echo "<option value = ''> Select </option>";
			$from_month = $ex[1];

			for ($x = $from_month; $x <= $from_month + $month_count; $x++) {
				$months = date('M', mktime(0, 0, 0, $x, 1));
				$months_key = date('m', mktime(0, 0, 0, $x, 1));
				echo  "<option value = '" . '01-' . $months_key . "'>" . $months . "</option>";
			}
		}
	}
}
